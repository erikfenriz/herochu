{"ast":null,"code":"export var rotatingCursor = function () {\n  /* Local Variables */\n  var INTERVAL_POSITION = 5;\n  var INTERVAL_ROTATION = 100;\n  var lastCursorPos = {\n    x: -999,\n    y: -999\n  };\n  var currentCursorPos = {\n    x: -999,\n    y: -999\n  };\n  var lastCursorAngle = 0,\n      cursorAngle = 0;\n  var cursorEl;\n  /* Local Functions */\n  // NOTE: I am transform two different elements here because so I can only animate the rotation with 'transition-property: transform'.\n\n  function setCurrentCursorProps() {\n    // Apply translation (set to actual cursor position)\n    cursorEl.style.transform = \"translate(\".concat(currentCursorPos.x, \"px, \").concat(currentCursorPos.y, \"px)\"); // Ensure correct rotation transition direction\n\n    while (Math.abs(lastCursorAngle - cursorAngle) > 180) {\n      if (cursorAngle > lastCursorAngle) {\n        cursorAngle -= 360;\n      } else if (cursorAngle < lastCursorAngle) {\n        cursorAngle += 360;\n      }\n    } // Apply rotation\n    // cursorImageEl.style.transform = `rotate(${cursorAngle - 90}deg)`;\n\n  }\n\n  function updateCursor() {\n    window.addEventListener('mousemove', function (event) {\n      currentCursorPos = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    }); // Interval for updating cursor-position\n\n    setInterval(setCurrentCursorProps, INTERVAL_POSITION); // Interval for updating cursor-rotation\n\n    setInterval(function () {\n      var delt = {\n        x: lastCursorPos.x - currentCursorPos.x,\n        y: lastCursorPos.y - currentCursorPos.y\n      };\n      if (Math.abs(delt.x) < 3 && Math.abs(delt.y) < 3) return;\n      cursorAngle = Math.atan2(delt.y, delt.x) * 180 / Math.PI;\n      setCurrentCursorProps();\n      lastCursorPos = currentCursorPos;\n      lastCursorAngle = cursorAngle;\n    }, INTERVAL_ROTATION);\n  }\n  /* Public Functions */\n\n\n  return {\n    initialize: function initialize() {\n      cursorEl = document.querySelector('#cursor');\n      updateCursor();\n    }\n  };\n}();","map":{"version":3,"sources":["/home/erik/projects/dedoface/src/components/VideoComponents/cursor.js"],"names":["rotatingCursor","INTERVAL_POSITION","INTERVAL_ROTATION","lastCursorPos","x","y","currentCursorPos","lastCursorAngle","cursorAngle","cursorEl","setCurrentCursorProps","style","transform","Math","abs","updateCursor","window","addEventListener","event","clientX","clientY","setInterval","delt","atan2","PI","initialize","document","querySelector"],"mappings":"AAAA,OAAO,IAAIA,cAAc,GAAI,YAAY;AACrC;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,iBAAiB,GAAG,GAA1B;AACA,MAAIC,aAAa,GAAG;AAACC,IAAAA,CAAC,EAAE,CAAC,GAAL;AAAUC,IAAAA,CAAC,EAAE,CAAC;AAAd,GAApB;AACA,MAAIC,gBAAgB,GAAG;AAACF,IAAAA,CAAC,EAAE,CAAC,GAAL;AAAUC,IAAAA,CAAC,EAAE,CAAC;AAAd,GAAvB;AACA,MAAIE,eAAe,GAAG,CAAtB;AAAA,MAAyBC,WAAW,GAAG,CAAvC;AACA,MAAIC,QAAJ;AAEA;AAEA;;AACA,WAASC,qBAAT,GAAiC;AAC7B;AACAD,IAAAA,QAAQ,CAACE,KAAT,CAAeC,SAAf,uBAAwCN,gBAAgB,CAACF,CAAzD,iBAAiEE,gBAAgB,CAACD,CAAlF,SAF6B,CAI7B;;AACA,WAAOQ,IAAI,CAACC,GAAL,CAASP,eAAe,GAAGC,WAA3B,IAA0C,GAAjD,EAAsD;AAClD,UAAIA,WAAW,GAAGD,eAAlB,EAAmC;AAC/BC,QAAAA,WAAW,IAAI,GAAf;AACH,OAFD,MAEO,IAAIA,WAAW,GAAGD,eAAlB,EAAmC;AACtCC,QAAAA,WAAW,IAAI,GAAf;AACH;AACJ,KAX4B,CAY7B;AACA;;AACH;;AAED,WAASO,YAAT,GAAwB;AACpBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC,UAAAC,KAAK,EAAI;AAC1CZ,MAAAA,gBAAgB,GAAG;AAACF,QAAAA,CAAC,EAAEc,KAAK,CAACC,OAAV;AAAmBd,QAAAA,CAAC,EAAEa,KAAK,CAACE;AAA5B,OAAnB;AACH,KAFD,EADoB,CAKpB;;AACAC,IAAAA,WAAW,CAACX,qBAAD,EAAwBT,iBAAxB,CAAX,CANoB,CAQpB;;AACAoB,IAAAA,WAAW,CAAC,YAAM;AACd,UAAMC,IAAI,GAAG;AACTlB,QAAAA,CAAC,EAAED,aAAa,CAACC,CAAd,GAAkBE,gBAAgB,CAACF,CAD7B;AAETC,QAAAA,CAAC,EAAEF,aAAa,CAACE,CAAd,GAAkBC,gBAAgB,CAACD;AAF7B,OAAb;AAIA,UAAIQ,IAAI,CAACC,GAAL,CAASQ,IAAI,CAAClB,CAAd,IAAmB,CAAnB,IAAwBS,IAAI,CAACC,GAAL,CAASQ,IAAI,CAACjB,CAAd,IAAmB,CAA/C,EAAkD;AAClDG,MAAAA,WAAW,GAAIK,IAAI,CAACU,KAAL,CAAWD,IAAI,CAACjB,CAAhB,EAAmBiB,IAAI,CAAClB,CAAxB,IAA6B,GAA7B,GAAmCS,IAAI,CAACW,EAAvD;AAEAd,MAAAA,qBAAqB;AAErBP,MAAAA,aAAa,GAAGG,gBAAhB;AACAC,MAAAA,eAAe,GAAGC,WAAlB;AACH,KAZU,EAYRN,iBAZQ,CAAX;AAaH;AAED;;;AACA,SAAO;AACHuB,IAAAA,UAAU,EAAE,sBAAM;AACdhB,MAAAA,QAAQ,GAAGiB,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAX;AAEAZ,MAAAA,YAAY;AACf;AALE,GAAP;AAOH,CA5D2B,EAArB","sourcesContent":["export let rotatingCursor = (function () {\n    /* Local Variables */\n    const INTERVAL_POSITION = 5;\n    const INTERVAL_ROTATION = 100;\n    let lastCursorPos = {x: -999, y: -999};\n    let currentCursorPos = {x: -999, y: -999};\n    let lastCursorAngle = 0, cursorAngle = 0;\n    let cursorEl;\n\n    /* Local Functions */\n\n    // NOTE: I am transform two different elements here because so I can only animate the rotation with 'transition-property: transform'.\n    function setCurrentCursorProps() {\n        // Apply translation (set to actual cursor position)\n        cursorEl.style.transform = `translate(${currentCursorPos.x}px, ${currentCursorPos.y}px)`;\n\n        // Ensure correct rotation transition direction\n        while (Math.abs(lastCursorAngle - cursorAngle) > 180) {\n            if (cursorAngle > lastCursorAngle) {\n                cursorAngle -= 360;\n            } else if (cursorAngle < lastCursorAngle) {\n                cursorAngle += 360;\n            }\n        }\n        // Apply rotation\n        // cursorImageEl.style.transform = `rotate(${cursorAngle - 90}deg)`;\n    }\n\n    function updateCursor() {\n        window.addEventListener('mousemove', event => {\n            currentCursorPos = {x: event.clientX, y: event.clientY};\n        });\n\n        // Interval for updating cursor-position\n        setInterval(setCurrentCursorProps, INTERVAL_POSITION);\n\n        // Interval for updating cursor-rotation\n        setInterval(() => {\n            const delt = {\n                x: lastCursorPos.x - currentCursorPos.x,\n                y: lastCursorPos.y - currentCursorPos.y\n            };\n            if (Math.abs(delt.x) < 3 && Math.abs(delt.y) < 3) return;\n            cursorAngle = (Math.atan2(delt.y, delt.x) * 180 / Math.PI);\n\n            setCurrentCursorProps();\n\n            lastCursorPos = currentCursorPos;\n            lastCursorAngle = cursorAngle;\n        }, INTERVAL_ROTATION);\n    }\n\n    /* Public Functions */\n    return {\n        initialize: () => {\n            cursorEl = document.querySelector('#cursor');\n\n            updateCursor();\n        }\n    };\n})();\n\n"]},"metadata":{},"sourceType":"module"}