{"ast":null,"code":"// Because of a WebKit-Issue which renders (even SVG) cursors blurry on Retina-Displays I decided to go for a solution which renders the cursor within a custom <div>.\nvar rotatingCursor = function () {\n  /* Local Variables */\n  var INTERVAL_POSITION = 5;\n  var INTERVAL_ROTATION = 100;\n  var lastCursorPos = {\n    x: -999,\n    y: -999\n  };\n  var currentCursorPos = {\n    x: -999,\n    y: -999\n  };\n  var lastCursorAngle = 0,\n      cursorAngle = 0;\n  var cursorEl, cursorImageEl;\n  /* Local Functions */\n  // NOTE: I am transform two different elements here because so I can only animate the rotation with 'transition-property: transform'.\n\n  function setCurrentCursorProps() {\n    // Apply translation (set to actual cursor position)\n    cursorEl.style.transform = \"translate(\".concat(currentCursorPos.x, \"px, \").concat(currentCursorPos.y, \"px)\"); // Ensure correct rotation transition direction\n\n    while (Math.abs(lastCursorAngle - cursorAngle) > 180) {\n      if (cursorAngle > lastCursorAngle) {\n        cursorAngle -= 360;\n      } else if (cursorAngle < lastCursorAngle) {\n        cursorAngle += 360;\n      }\n    } // Apply rotation\n\n\n    cursorImageEl.style.transform = \"rotate(\".concat(cursorAngle - 90, \"deg)\");\n  }\n\n  function updateCursor() {\n    window.addEventListener('mousemove', function (event) {\n      currentCursorPos = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    }); // Interval for updating cursor-position\n\n    setInterval(setCurrentCursorProps, INTERVAL_POSITION); // Interval for updating cursor-rotation\n\n    setInterval(function () {\n      var delt = {\n        x: lastCursorPos.x - currentCursorPos.x,\n        y: lastCursorPos.y - currentCursorPos.y\n      };\n      if (Math.abs(delt.x) < 3 && Math.abs(delt.y) < 3) return;\n      cursorAngle = Math.atan2(delt.y, delt.x) * 180 / Math.PI;\n      setCurrentCursorProps();\n      lastCursorPos = currentCursorPos;\n      lastCursorAngle = cursorAngle;\n    }, INTERVAL_ROTATION);\n  }\n  /* Public Functions */\n\n\n  return {\n    'initialize': function initialize() {\n      cursorEl = document.querySelector('#cursor');\n      cursorImageEl = document.querySelector('#cursor > img');\n      updateCursor();\n    }\n  };\n}();\n\ndocument.addEventListener('DOMContentLoaded', rotatingCursor.initialize);","map":{"version":3,"sources":["/home/erik/projects/dedoface/src/components/VideoComponents/cur.js"],"names":["rotatingCursor","INTERVAL_POSITION","INTERVAL_ROTATION","lastCursorPos","x","y","currentCursorPos","lastCursorAngle","cursorAngle","cursorEl","cursorImageEl","setCurrentCursorProps","style","transform","Math","abs","updateCursor","window","addEventListener","event","clientX","clientY","setInterval","delt","atan2","PI","document","querySelector","initialize"],"mappings":"AAAA;AACC,IAAIA,cAAc,GAAI,YAAW;AAE9B;AACA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,iBAAiB,GAAG,GAA1B;AACA,MAAIC,aAAa,GAAG;AAACC,IAAAA,CAAC,EAAE,CAAC,GAAL;AAAUC,IAAAA,CAAC,EAAE,CAAC;AAAd,GAApB;AACA,MAAIC,gBAAgB,GAAG;AAACF,IAAAA,CAAC,EAAE,CAAC,GAAL;AAAUC,IAAAA,CAAC,EAAE,CAAC;AAAd,GAAvB;AACA,MAAIE,eAAe,GAAG,CAAtB;AAAA,MAAyBC,WAAW,GAAG,CAAvC;AACA,MAAIC,QAAJ,EAAcC,aAAd;AAGA;AAEA;;AACA,WAASC,qBAAT,GAAiC;AAC7B;AACAF,IAAAA,QAAQ,CAACG,KAAT,CAAeC,SAAf,uBAAwCP,gBAAgB,CAACF,CAAzD,iBAAiEE,gBAAgB,CAACD,CAAlF,SAF6B,CAI7B;;AACA,WAAOS,IAAI,CAACC,GAAL,CAASR,eAAe,GAAGC,WAA3B,IAA0C,GAAjD,EAAsD;AAClD,UAAIA,WAAW,GAAGD,eAAlB,EAAmC;AAC/BC,QAAAA,WAAW,IAAI,GAAf;AACH,OAFD,MAEO,IAAIA,WAAW,GAAGD,eAAlB,EAAmC;AACtCC,QAAAA,WAAW,IAAI,GAAf;AACH;AACJ,KAX4B,CAY7B;;;AACAE,IAAAA,aAAa,CAACE,KAAd,CAAoBC,SAApB,oBAA0CL,WAAW,GAAG,EAAxD;AACH;;AAED,WAASQ,YAAT,GAAwB;AACpBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC,UAAAC,KAAK,EAAI;AAC1Cb,MAAAA,gBAAgB,GAAG;AAACF,QAAAA,CAAC,EAAEe,KAAK,CAACC,OAAV;AAAmBf,QAAAA,CAAC,EAAEc,KAAK,CAACE;AAA5B,OAAnB;AACH,KAFD,EADoB,CAKpB;;AACAC,IAAAA,WAAW,CAACX,qBAAD,EAAwBV,iBAAxB,CAAX,CANoB,CAQpB;;AACAqB,IAAAA,WAAW,CAAC,YAAM;AACd,UAAMC,IAAI,GAAG;AACTnB,QAAAA,CAAC,EAAED,aAAa,CAACC,CAAd,GAAkBE,gBAAgB,CAACF,CAD7B;AAETC,QAAAA,CAAC,EAAEF,aAAa,CAACE,CAAd,GAAkBC,gBAAgB,CAACD;AAF7B,OAAb;AAIA,UAAIS,IAAI,CAACC,GAAL,CAASQ,IAAI,CAACnB,CAAd,IAAmB,CAAnB,IAAwBU,IAAI,CAACC,GAAL,CAASQ,IAAI,CAAClB,CAAd,IAAmB,CAA/C,EAAkD;AAClDG,MAAAA,WAAW,GAAIM,IAAI,CAACU,KAAL,CAAWD,IAAI,CAAClB,CAAhB,EAAmBkB,IAAI,CAACnB,CAAxB,IAA6B,GAA7B,GAAmCU,IAAI,CAACW,EAAvD;AAEAd,MAAAA,qBAAqB;AAErBR,MAAAA,aAAa,GAAGG,gBAAhB;AACAC,MAAAA,eAAe,GAAGC,WAAlB;AACH,KAZU,EAYRN,iBAZQ,CAAX;AAaH;AAGD;;;AAEA,SAAO;AAEH,kBAAe,sBAAM;AACjBO,MAAAA,QAAQ,GAAGiB,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAX;AACAjB,MAAAA,aAAa,GAAGgB,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAhB;AACAX,MAAAA,YAAY;AACf;AANE,GAAP;AAUH,CAnEqB,EAArB;;AAsEDU,QAAQ,CAACR,gBAAT,CAA0B,kBAA1B,EAA8ClB,cAAc,CAAC4B,UAA7D","sourcesContent":["// Because of a WebKit-Issue which renders (even SVG) cursors blurry on Retina-Displays I decided to go for a solution which renders the cursor within a custom <div>.\n let rotatingCursor = (function() {\n\n    /* Local Variables */\n    const INTERVAL_POSITION = 5;\n    const INTERVAL_ROTATION = 100;\n    let lastCursorPos = {x: -999, y: -999};\n    let currentCursorPos = {x: -999, y: -999};\n    let lastCursorAngle = 0, cursorAngle = 0;\n    let cursorEl, cursorImageEl;\n\n\n    /* Local Functions */\n\n    // NOTE: I am transform two different elements here because so I can only animate the rotation with 'transition-property: transform'.\n    function setCurrentCursorProps() {\n        // Apply translation (set to actual cursor position)\n        cursorEl.style.transform = `translate(${currentCursorPos.x}px, ${currentCursorPos.y}px)`;\n\n        // Ensure correct rotation transition direction\n        while (Math.abs(lastCursorAngle - cursorAngle) > 180) {\n            if (cursorAngle > lastCursorAngle) {\n                cursorAngle -= 360;\n            } else if (cursorAngle < lastCursorAngle) {\n                cursorAngle += 360;\n            }\n        }\n        // Apply rotation\n        cursorImageEl.style.transform = `rotate(${cursorAngle - 90}deg)`;\n    }\n\n    function updateCursor() {\n        window.addEventListener('mousemove', event => {\n            currentCursorPos = {x: event.clientX, y: event.clientY};\n        });\n\n        // Interval for updating cursor-position\n        setInterval(setCurrentCursorProps, INTERVAL_POSITION);\n\n        // Interval for updating cursor-rotation\n        setInterval(() => {\n            const delt = {\n                x: lastCursorPos.x - currentCursorPos.x,\n                y: lastCursorPos.y - currentCursorPos.y\n            }\n            if (Math.abs(delt.x) < 3 && Math.abs(delt.y) < 3) return;\n            cursorAngle = (Math.atan2(delt.y, delt.x) * 180 / Math.PI);\n\n            setCurrentCursorProps();\n\n            lastCursorPos = currentCursorPos;\n            lastCursorAngle = cursorAngle;\n        }, INTERVAL_ROTATION);\n    }\n\n\n    /* Public Functions */\n\n    return {\n\n        'initialize' : () => {\n            cursorEl = document.querySelector('#cursor');\n            cursorImageEl = document.querySelector('#cursor > img');\n            updateCursor();\n        }\n\n    };\n\n})();\n\n\ndocument.addEventListener('DOMContentLoaded', rotatingCursor.initialize);\n"]},"metadata":{},"sourceType":"module"}