{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwitterTweetUrl = exports.defaultTwitterBaseUrl = exports.defaultTwitterUrlOptions = undefined;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _queryString = require('query-string');\n\nvar _queryString2 = _interopRequireDefault(_queryString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultTwitterUrlOptions = exports.defaultTwitterUrlOptions = {\n  link: typeof document !== 'undefined' ? document.location.href : null,\n  text: null,\n  hashtags: null,\n  via: null,\n  related: null,\n  customQueryParams: null\n};\nvar defaultTwitterBaseUrl = exports.defaultTwitterBaseUrl = 'https://twitter.com/intent/tweet';\n\nvar TwitterTweetUrl = exports.TwitterTweetUrl = function () {\n  function TwitterTweetUrl() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTwitterBaseUrl;\n    (0, _classCallCheck3.default)(this, TwitterTweetUrl);\n\n    if (!_lodash2.default.isObject(options) || _lodash2.default.isArray(options)) {\n      throw new Error('Provided options can only be of type object');\n    }\n\n    this.options = Object.assign({}, defaultTwitterUrlOptions, options); // Sometimes the defaultTwitterUrlOptions will be defined before the browser is ready which evaluates the link to\n    // null, and if the link is null the toUrl() call won't work. So this is to make sure the options.link is defined.\n\n    if (_lodash2.default.isNil(this.options.link) && typeof document !== 'undefined') {\n      this.options.link = document.location.href;\n    }\n\n    if (!_lodash2.default.isString(baseUrl)) {\n      throw new Error('Provided baseUrl can only be of type string');\n    } // Changed the base url to 'https://twitter.com/intent/tweet' instead of 'https://twitter.com/share'\n    // Because /share adds the 'original_referer' param and forwards it to 'https://twitter.com/intent/tweet'\n\n\n    this.baseUrl = baseUrl;\n  }\n  /**\n   * Converts an array into a comma separated list.\n   *\n   * format: input => output\n   * e.g ['test', 'test ', ''] => 'test,test'\n   * or ['test'] => 'test'\n   *\n   * @param strOrArr\n   * @returns {string}\n   */\n\n\n  (0, _createClass3.default)(TwitterTweetUrl, [{\n    key: 'toUrl',\n\n    /**\n     * Converts the options into a url based on the button parameter reference:\n     * https://developer.twitter.com/en/docs/twitter-for-websites/tweet-button/guides/parameter-reference1\n     *\n     * @returns {string}\n     */\n    value: function toUrl() {\n      // Check if options.link is a string\n      if (!_lodash2.default.isString(this.options.link)) {\n        throw new Error('options.link can only be in string format');\n      }\n\n      var params = {\n        url: this.options.link\n      }; // Set the baseUrl with the link url.\n\n      var url = this.baseUrl; // Check if there is text and then adds that text as a param to the url.\n\n      if (!_lodash2.default.isNil(this.options.text)) {\n        // Check if options.text is a string.\n        if (!_lodash2.default.isString(this.options.text)) {\n          throw new Error('options.text can only be in string format');\n        }\n\n        params.text = this.options.text;\n      } // Checks if hashtags are provided.\n\n\n      if (!_lodash2.default.isNil(this.options.hashtags)) {\n        // Check if options.hashtags has the correct type.\n        if (!(_lodash2.default.isArray(this.options.hashtags) || _lodash2.default.isString(this.options.hashtags))) {\n          throw new Error('options.hashtags can only be in array or string format');\n        }\n\n        var hashtags = null;\n\n        if (_lodash2.default.isArray(this.options.hashtags)) {\n          hashtags = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.hashtags);\n        } else if (_lodash2.default.isString(this.options.hashtags)) {\n          hashtags = TwitterTweetUrl.stringToCommaSeparatedList(this.options.hashtags);\n        }\n\n        if (hashtags !== null) {\n          params.hashtags = hashtags;\n        }\n      } // Check if options.via is provided.\n\n\n      if (!_lodash2.default.isNil(this.options.via)) {\n        // Check if via is of the correct type.\n        if (!_lodash2.default.isString(this.options.via)) {\n          throw new Error('options.via can only be in string format');\n        }\n\n        params.via = this.options.via;\n      } // Check if options.related is provided.\n\n\n      if (!_lodash2.default.isNil(this.options.related)) {\n        // Check if options.related is a array or string.\n        if (!(_lodash2.default.isArray(this.options.related) || _lodash2.default.isString(this.options.related))) {\n          throw new Error('options.related can only be in array or string format');\n        }\n\n        var related = null;\n\n        if (_lodash2.default.isArray(this.options.related)) {\n          related = TwitterTweetUrl.arrayToCommaSeparatedList(this.options.related);\n        } else if (_lodash2.default.isString(this.options.related)) {\n          related = TwitterTweetUrl.stringToCommaSeparatedList(this.options.related);\n        }\n\n        if (related !== null) {\n          params.related = related;\n        }\n      }\n\n      var other = ''; // Check if other is provided.\n\n      if (!_lodash2.default.isNil(this.options.customQueryParams)) {\n        // Check if the options.customQueryParams is a object or a string\n        if (!(_lodash2.default.isObject(this.options.customQueryParams) || _lodash2.default.isString(this.options.customQueryParams)) || _lodash2.default.isArray(this.options.customQueryParams)) {\n          throw new Error('options.customQueryParams can only be in object or string format');\n        }\n\n        if (_lodash2.default.isObject(this.options.customQueryParams)) {\n          other = _queryString2.default.stringify(this.options.customQueryParams);\n        } else if (_lodash2.default.isString(this.options.customQueryParams)) {\n          other = _queryString2.default.stringify(_queryString2.default.parse(this.options.customQueryParams));\n        }\n      }\n\n      if (Object.keys(params).length > 0) {\n        url += '?' + _queryString2.default.stringify(params);\n\n        if (other.trim() !== '') {\n          url += '&' + other;\n        }\n      } else if (other.trim() !== '') {\n        url += '?' + other;\n      }\n\n      return url;\n    }\n  }], [{\n    key: 'arrayToCommaSeparatedList',\n    value: function arrayToCommaSeparatedList() {\n      var strOrArr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!(_lodash2.default.isArray(strOrArr) || _lodash2.default.isString(strOrArr))) {\n        throw new Error('Can only provide string or array');\n      }\n\n      if (_lodash2.default.isString(strOrArr)) {\n        strOrArr = [strOrArr];\n      }\n\n      var str = strOrArr.filter(function (item) {\n        return _lodash2.default.isString(item) || _lodash2.default.isNumber(item);\n      }).map(function (item) {\n        return item.toString().trim();\n      }).filter(function (item) {\n        return item !== '';\n      }).join(',');\n      return str;\n    }\n    /**\n     * Converts a string into a comma separated list\n     *\n     * format: input => output\n     * e.g 'test, test,' => 'test,test'\n     * or 'test, test' => 'test,test'\n     * or 'test test' => 'test,test'\n     * or 'test' => 'test'\n     *\n     * @param str\n     * @returns {string}\n     */\n\n  }, {\n    key: 'stringToCommaSeparatedList',\n    value: function stringToCommaSeparatedList() {\n      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (!_lodash2.default.isString(str)) {\n        throw new Error('Can only provide string');\n      }\n\n      str = str.trim().split(',').join(' ').split(' ').filter(function (item) {\n        return item.trim() !== '';\n      }).map(function (item) {\n        return item.trim();\n      }).join(',');\n      return str;\n    }\n  }]);\n  return TwitterTweetUrl;\n}();","map":null,"metadata":{},"sourceType":"script"}